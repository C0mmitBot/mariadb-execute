#!/bin/bash

PROGRAM_VERSION='1.0.6'

if [ -z "$1" ]; then
  echo "no parameter given. please see the result of command: execute help"
  exit 0
else
  is_param=$1
fi

path_execute=$( readlink -f /usr/bin/execute )
path_mysql=/usr/bin/mysql
path_mysqldump=/usr/bin/mysqldump

if [ "$is_param" = 'help' ] || [ "$is_param" = '--help' ] || [ "$is_param" = '-help' ] || [ "$is_param" = '?' ] || [ "$is_param" = '/?' ]; then
  echo ""
  echo "[PRE-REQUISITES]"
  echo ""
  echo "You must code your data structures and initial data scripts in the SQL file with filename leading by 0 (zero)"
  echo "  eg: 000-data-structure.sql"
  echo ""
  echo "The folder that contains your script must have a file named db.conf that contains config as below:"
  echo "  db_host = your_database_hostname"
  echo "  db_port = your_database_port"
  echo "  db_user = your_username"
  echo "  db_pass = your_password"
  echo "  db_name = your_database_name"
  echo ""
  echo "You must code the Stored Routines inside the SUB-FOLDER named 'routines' (without any quotes)"
  echo "The routines script must save in the SQL file prefixed with filename leading by 0 (zero)"
  echo "  eg: 001-my_stored-proc.sql"
  echo ""
  echo "This folder naming convention was ALREADY setup for the workspace extracted from Mokapedia's git_project_template.tar.gz"
  echo "Clone from here : http://code.mokapedia.net/project-template/git-project-template"
  echo ""
  echo "[USAGE EXAMPLES]"
  echo ""
  echo "cd /path/to/your/queries/folder"
  echo "execute init                             # this will create database, user & grant privileges automatically (this will drop everything!)"
  echo "execute model                            # this will drop/re-create your database and refill the schema + routines"
  echo "execute code                             # this will re-create ONLY the files under the 'routines' folder"
  echo "execute \"SELECT * FROM some_tables\"      # this will execute the specified queris and output the result to screen"
  echo "execute backup                           # this will dump your database into *.sql that'll be generated on the timestamp-based-name subfolder"
  echo "execute restore 2015-01-01               # this will restore the previously backup scripts on the given timestamp"
  echo "execute generate-config                  # this will generate the db.conf (if not exists)"
  echo "execute show-config                      # this will display the db.conf values"
  echo "execute login                            # this will login into CLI Mode of MySQL/MariaDB database console"
  echo "execute help                             # display this inline help"
  echo "execute -v                               # display the program version"
  echo "execute self-update                      # update the program"
  echo ""
  exit 0
fi

if [ "$is_param" = '-v' ] || [ "$is_param" = '-V' ] || [ "$is_param" = '--version' ]; then
  echo "GNU Execute version $PROGRAM_VERSION -- build at $( date -r $path_execute )"
  exit 0
fi

if [ "$is_param" = 'self-update' ] || [ "$is_param" = '--update' ] || [ "$is_param" = '-u' ] || [ "$is_param" = '-U' ]  || [ "$is_param" = '--self-update' ]  || [ "$is_param" = '-self-update' ]; then
  current_directory=$pwd
  cd /tmp
  if [ -f /tmp/execute ]; then
    rm /tmp/execute
  fi
  wget http://code.mokapedia.net/server/execute/raw/master/execute
  chmod +x /tmp/execute
  sudo cp /tmp/execute /usr/bin
  echo "UPDATE SUCCESSFULLY!"
  cd $current_directory
  exit 0
fi

config_file="$(pwd)/db.conf"

if [ -f $config_file ]; then
  ed -s $config_file <<< w
  shopt -s extglob
  while IFS='= ' read lhs rhs
  do
    if [[ ! $lhs =~ ^\ *# && -n $lhs ]]; then
      rhs="${rhs%%\#*}"    # Del in line right comments
      rhs="${rhs%%*( )}"   # Del trailing spaces
      rhs="${rhs%\"*}"     # Del opening string quotes
      rhs="${rhs#\"*}"     # Del closing string quotes
      declare $lhs="$rhs"
    fi
  done < $config_file



  if [ "$is_param" = 'structure' ] || [ "$is_param" = 'model' ]; then
    echo "trying to execute the schema data structures & mandatory kernel data ..."
    file_sql="$(pwd)/001-structures.sql"
    if [ -f $file_sql ]; then
      if [ "$db_user" = 'root' ]; then
        $path_mysql --host=$db_host --port=$db_port --user=$db_user --password=$db_pass mysql -e "drop database if exists $db_name"
        $path_mysql --host=$db_host --port=$db_port --user=$db_user --password=$db_pass mysql -e "create database $db_name"
      fi
      for sql_file in `ls ./0*.sql`; do echo "executing the $sql_file" && $path_mysql --host=$db_host --port=$db_port --user=$db_user --password=$db_pass $db_name < $sql_file ; done
    else
      echo "no 0*.sql file found."
    fi
    echo ""
    echo "trying to refill the stored routines ..."
    directory_routines="$(pwd)/core-routines"
    if [ -d $directory_routines ]; then
      for sql_file in `ls ./core-routines/0*.sql`; do echo "executing the $sql_file" && $path_mysql --host=$db_host --port=$db_port --user=$db_user --password=$db_pass $db_name < $sql_file ; done
    else
      mkdir -p $directory_routines
      touch $directory_routines/.gitkeep
    fi
    directory_routines="$(pwd)/routines"
    if [ -d $directory_routines ]; then
      for sql_file in `ls ./routines/0*.sql`; do echo "executing the $sql_file" && $path_mysql --host=$db_host --port=$db_port --user=$db_user --password=$db_pass $db_name < $sql_file ; done
    else
      mkdir -p $directory_routines
      touch $directory_routines/.gitkeep
    fi
    echo ""
    echo "all done. enjoy!"
  elif [ "$is_param" = 'init' ] || [ "$is_param" = '-i' ] || [ "$is_param" = '--init' ]; then
    read -p "Prompt for database ROOT password : " root_password
    $path_mysql --host=$db_host --port=$db_port --user=root --password=$root_password -e "drop database if exists $db_name; create database $db_name;"
    $path_mysql --host=$db_host --port=$db_port --user=root --password=$root_password -e "grant all privileges on $db_name.* to '$db_user'@'localhost' identified by '$db_pass' with grant option; flush privileges;"
    echo ""
    echo "Successfully init the database/user/password based on db.conf configuration values."
    echo "Please try to login to your database with that credentials OR re-execute the execute command with options --login"
    exit 0
  elif [ "$is_param" = 'login' ] || [ "$is_param" = '-l' ] || [ "$is_param" = '--login' ]; then
    $path_mysql --host=$db_host --port=$db_port --user=$db_user --password=$db_pass $db_name
    exit 0
  elif [ "$is_param" = 'routine' ] || [ "$is_param" = 'code' ] || [ "$is_param" = 'sp' ] || [ "$is_param" = 'routines' ] || [ "$is_param" = 'logic' ]; then
    echo "trying to re-update the stored routines ..."
    directory_routines="$(pwd)/routines"
    if [ -d $directory_routines ]; then
      for sql_file in `ls ./routines/0*.sql`; do echo "executing the $sql_file" && $path_mysql --host=$db_host --port=$db_port --user=$db_user --password=$db_pass $db_name < $sql_file ; done
    fi
    echo ""
    echo "all done. enjoy!"
    exit 0
  elif [ "$is_param" = 'dump' ] || [ "$is_param" = 'backup' ]; then

    timestamp_flag=` date +%F`
    backup_dir="$(pwd)/$timestamp_flag"

    if [ -d $backup_dir ]; then
      rm -R $backup_dir
    fi

    mkdir -p $backup_dir

    echo "dump the structures (without trigger definition)..."
    touch $backup_dir/1-$db_name-structure.sql
    echo "drop database if exists $db_name;" > $backup_dir/1-$db_name-structure.sql
    echo "create database $db_name;" >> $backup_dir/1-$db_name-structure.sql
    echo "use $db_name;" >> $backup_dir/1-$db_name-structure.sql
    echo "" >> $backup_dir/1-$db_name-structure.sql
    $path_mysqldump -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB --add-drop-table --create-options --quote-names --no-data --skip-triggers --databases $db_name >> $backup_dir/1-$db_name-structure.sql

    echo "dump the routines..."
    touch $backup_dir/2-$db_name-routines.sql
    echo "use $db_name;" > $backup_dir/2-$db_name-routines.sql
    $path_mysqldump -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB --quote-names --no-create-db --no-create-info --no-data --routines --databases $db_name >> $backup_dir/2-$db_name-routines.sql

    echo "dump the data..."
    touch $backup_dir/3-$db_name-data.sql
    echo "use $db_name;" > $backup_dir/3-$db_name-data.sql
    echo "set unique_checks = 0;" >> $backup_dir/3-$db_name-data.sql
    echo "set foreign_key_checks = 0;" >> $backup_dir/3-$db_name-data.sql
    echo "set @disable_triggers = 1;" >> $backup_dir/3-$db_name-data.sql
    $path_mysqldump -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB --hex-blob --lock-tables --no-create-db --no-create-info --skip-triggers --quote-names --dump-date --databases $db_name >> $backup_dir/3-$db_name-data.sql

    echo "dump the triggers..."
    echo "use $db_name;" > $backup_dir/4-$db_name-triggers.sql
    $path_mysqldump -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB --quote-names --no-create-db --no-create-info --no-data --triggers --databases $db_name >> $backup_dir/4-$db_name-triggers.sql

    echo "dump the event schedulers..."
    echo "use $db_name;" > $backup_dir/5-$db_name-events.sql
    $path_mysqldump -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB --quote-names --no-create-db --no-create-info --no-data --events --databases $db_name >> $backup_dir/5-$db_name-events.sql

  elif [ "$is_param" = 'restore' ]; then
    if [ -z "$2" ]; then
      echo "you missed type the 2nd parameter. see HELP to gain more information."
      exit
    else
      timestamp_flag=$2
      backup_dir="$(pwd)/$timestamp_flag"
      if [ -d $backup_dir ]; then
        echo "trying to restore the backup scripts of database $db_name from $timestamp_flag's backup"
        mysql -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB $db_name < $backup_dir/1-$db_name-structure.sql
        mysql -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB $db_name < $backup_dir/2-$db_name-routines.sql
        mysql -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB $db_name < $backup_dir/3-$db_name-data.sql
        mysql -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB $db_name < $backup_dir/4-$db_name-triggers.sql
        mysql -u$db_user -p$db_pass --host=$db_host --port=$db_port --max_allowed_packet=2GB $db_name < $backup_dir/5-$db_name-events.sql
      else
        echo "cannot find the backup scripts from date $timestamp_flag (possibly you have type the wrong date as the 2nd command line parameter)"
        exit 0
      fi
    fi
  elif [ "$is_param" = 'show-config' ]; then
    cat $config_file

  elif [ "$is_param" = 'generate-config' ]; then
    read -p "You already have the db.conf file. Do you want to update the configuration? (Y/N) : " db_conf_reconfigure
    if [ "$db_conf_reconfigure" = 'Y' ] || [ "$db_conf_reconfigure" = 'y' ]; then
      nano $config_file
    else
      echo ""
      exit 0
    fi
  else
    echo "The query result of \"$is_param\" is:"
    $path_mysql --host=$db_host --port=$db_port --user=$db_user --password=$db_pass --database=$db_name -e "set autocommit = 0; $is_param"
  fi
else
  if [ "$is_param" = 'generate-config' ]; then
    config_file="$(pwd)/db.conf"
    echo "db_host = localhost" > $config_file
    echo "db_port = 3306" >> $config_file
    echo "db_user = root" >> $config_file
    echo "db_pass = yourpassword" >> $config_file
    echo "db_name = test" >> $config_file
  else
    echo "Cannot find db.conf. "
    echo "You must execute the 'execute' command inside the folder that have the database configuration variables."
    echo "If you have NOT any db.conf, generate it with the command 'execute generate-config' in the folder."
    exit 0
  fi
fi

exit 0
